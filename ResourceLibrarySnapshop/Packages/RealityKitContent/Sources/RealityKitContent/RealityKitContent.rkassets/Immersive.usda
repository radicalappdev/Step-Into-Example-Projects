#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root" (
    customData = {
        float3 rotationEulerHint = (0, -0.20943955, 0)
    }
)
{
    reorder nameChildren = ["Sphere_Left", "Sphere_Right", "GridMaterial"]
    quatf xformOp:orient = (0.9945219, 0, -0.10452848, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "SkyDome" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        prepend references = @SkyDome.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.01, 1, 3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "DomeMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "DomeMAT"
                {
                    color3f inputs:diffuseColor = (0.47450978, 0.086274505, 0.1764706) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }

            over "GroundMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GroundMAT"
                {
                    color3f inputs:diffuseColor = (0.47450978, 0.086274505, 0.1764706) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }

            over "GridMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GridMAT"
                {
                    color3f inputs:diffuseColor = (0.47450978, 0.086274505, 0.1764706) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }
        }

        over "Grid" (
            active = false
        )
        {
        }
    }

    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-0.5669676, -0.13082236, -0.20208746)
        }
    )
    {
        quatf xformOp:orient = (0.9513029, -0.28401065, -0.0342818, -0.114828005)
        float3 xformOp:scale = (0.99999994, 0.99999994, 0.9999999)
        float3 xformOp:translate = (0, 10, -4.7683716e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            token info:id = "RealityKit.DirectionalLight"

            def RealityKitStruct "Shadow"
            {
            }
        }
    }

    def Xform "PointLight"
    {
        float3 xformOp:translate = (0, 4, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "PointLight"
        {
            float attenuationFalloffExponent = 1
            float attenuationRadius = 20
            token info:id = "RealityKit.PointLight"
        }
    }

    def "Stack01" (
        active = true
        prepend references = @Stack01.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3487605e-7, 5, -12)
    }
}


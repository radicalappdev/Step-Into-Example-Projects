#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SkyDome", "DirectionalLight", "Light_1", "Light_2", "Light_3", "Floor", "Light_1_Spin", "Light_2_Spin", "Light_3_Spin", "Loop", "RCP_BehaviorsContainer", "OnAddedToScene", "Hearts1", "Hearts2"]
    def "SkyDome" (
        active = false
        prepend references = @SkyDome.usdz@
    )
    {
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "GridMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GridMAT"
                {
                    color3f inputs:diffuseColor = (0.5686275, 0.3254902, 0.57254905) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }

            over "GroundMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GroundMAT"
                {
                    color3f inputs:diffuseColor = (0.999996, 1, 1) (
                        colorSpace = "srgb_texture"
                    )
                }
            }

            over "DomeMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "DomeMAT"
                {
                    color3f inputs:diffuseColor = (0.999996, 1, 1) (
                        colorSpace = "srgb_texture"
                    )
                }
            }
        }
    }

    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-0.9838225, 0, 0)
        }
    )
    {
        quatf xformOp:orient = (0.88143176, -0.47231138, 0, 0)
        float3 xformOp:scale = (1, 0.9999999, 0.9999999)
        float3 xformOp:translate = (0, 10, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            token info:id = "RealityKit.DirectionalLight"

            def RealityKitStruct "Shadow"
            {
            }
        }
    }

    def Xform "Light_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.42414752, 0.08417187, 2.9575164)
        }
    )
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.09858806, -0.02162842, 0.21319143, 0.9717829)
        float3 xformOp:scale = (1, 1, 0.9999999)
        float3 xformOp:translate = (0, 0, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cone "Cone" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "SpotLight"]
            uniform token axis = "Y"
            double height = 10
            rel material:binding = </Root/Light_1/Cone/DefaultMaterial>
            double radius = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.9999997, 1, 0.99999964)
            float3 xformOp:translate = (0, -5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token cullMode = "front" (
                    allowedTokens = ["unspecified", "none", "front", "back"]
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Light_1/Cone/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    color3f inputs:diffuseColor = (0.7686275, 0.16470589, 0.4352941) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.7686275, 0.16470589, 0.4352941) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0.5
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.9
                    token outputs:surface
                }
            }

            def Xform "SpotLight" (
                customData = {
                    float3 rotationEulerHint = (1.5707964, -7.993959e-8, 3.1415927)
                }
            )
            {
                quatf xformOp:orient = (-5.917153e-8, -2.6457112e-9, 0.70710677, 0.70710677)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "SpotLight"
                {
                    float attenuationFalloffExponent = 0
                    float attenuationRadius = 10
                    float3 color = (0.6710024, 0.00089546974, 0.16192299)
                    token info:id = "RealityKit.SpotLight"
                    float innerAngle = 60
                    float outerAngle = 100

                    def RealityKitStruct "Shadow"
                    {
                        bool isEnabled = 1
                    }
                }
            }
        }
    }

    def Xform "Light_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (-4.9128137, 1.1388752, -1.5707958)
        }
    )
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (-0.219862, -0.67205715, 0.08166341, 0.70237523)
        float3 xformOp:scale = (0.99999964, 0.99999976, 0.9999998)
        float3 xformOp:translate = (-5.433185e-22, -2.3841858e-7, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cone "Cone" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "SpotLight"]
            uniform token axis = "Y"
            double height = 10
            rel material:binding = </Root/Light_2/Cone/DefaultMaterial>
            double radius = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, -5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token cullMode = "front" (
                    allowedTokens = ["unspecified", "none", "front", "back"]
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Light_2/Cone/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    color3f inputs:diffuseColor = (0.5686275, 0.3254902, 0.57254905) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.5686275, 0.3254902, 0.57254905) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0.5
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.9
                    token outputs:surface
                }
            }

            def Xform "SpotLight" (
                customData = {
                    float3 rotationEulerHint = (1.5707964, -7.993959e-8, 3.1415927)
                }
            )
            {
                quatf xformOp:orient = (-5.917153e-8, -2.6457112e-9, 0.70710677, 0.70710677)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "SpotLight"
                {
                    float attenuationFalloffExponent = 0
                    float attenuationRadius = 10
                    float3 color = (0.3273897, 0.07822741, 0.30332097)
                    token info:id = "RealityKit.SpotLight"
                    float innerAngle = 40
                    float outerAngle = 70

                    def RealityKitStruct "Shadow"
                    {
                        bool isEnabled = 1
                    }
                }
            }
        }
    }

    def Xform "Light_3" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.0750815, 0.08417191, 2.9575164)
        }
    )
    {
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (0.093334585, -0.0384195, 0.041204162, 0.99403965)
        float3 xformOp:scale = (1.0000001, 0.99999964, 0.9999995)
        float3 xformOp:translate = (0, 2.3841858e-7, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cone "Cone" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "SpotLight"]
            uniform token axis = "Y"
            double height = 10
            rel material:binding = </Root/Light_3/Cone/DefaultMaterial>
            double radius = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, -5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token cullMode = "front" (
                    allowedTokens = ["unspecified", "none", "front", "back"]
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Light_3/Cone/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    color3f inputs:diffuseColor = (0.078431375, 0.21568629, 0.63529414) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.078431375, 0.21568629, 0.63529414) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0.5
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.9
                    token outputs:surface
                }
            }

            def Xform "SpotLight" (
                customData = {
                    float3 rotationEulerHint = (1.5707964, -7.993959e-8, 3.1415927)
                }
            )
            {
                quatf xformOp:orient = (-5.917153e-8, -2.6457112e-9, 0.70710677, 0.70710677)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "SpotLight"
                {
                    float attenuationFalloffExponent = 0
                    float attenuationRadius = 10
                    float3 color = (0, 0.039524972, 0.39365923)
                    token info:id = "RealityKit.SpotLight"
                    float innerAngle = 40
                    float outerAngle = 80

                    def RealityKitStruct "Shadow"
                    {
                        bool isEnabled = 1
                    }
                }
            }
        }
    }

    def Xform "Floor" (
        active = true
    )
    {
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (0, -0.25, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floor/Cube/DefaultMaterial>
            double size = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (20, 0.1, 4)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floor/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.5686275, 0.3254902, 0.57254905) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Cube "Cube_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floor/Cube_1/DefaultMaterial>
            double size = 1
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (20, 0.1, 6)
            float3 xformOp:translate = (0, 0, 5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floor/Cube_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.078431375, 0.21568629, 0.63529414) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Cube "Cube_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floor/Cube_2/DefaultMaterial>
            double size = 1
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (20, 0.1, 6)
            float3 xformOp:translate = (0, 0, -5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floor/Cube_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.7686275, 0.16470589, 0.4352941) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }
    }

    def RealityKitTimeline "Light_1_Spin"
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 5
                uniform token info:id = "C855B25A-08D8-4FC9-AFB8-582625202204"
                float3 localAxis = (0.2, 1, 0)
                float revolutions = 1
                double startTime = 0
                rel target = </Root/Light_1>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "Light_2_Spin"
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 5
                uniform token info:id = "C855B25A-08D8-4FC9-AFB8-582625202204"
                float3 localAxis = (0.2, 1, 0)
                float revolutions = 1
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Light_2>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "Light_3_Spin"
    {
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 5
                uniform token info:id = "C855B25A-08D8-4FC9-AFB8-582625202204"
                float3 localAxis = (-0.3, 1, 0)
                float revolutions = 1
                token spinDirection = "clockwise"
                double startTime = 0
                rel target = </Root/Light_3>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "Loop"
    {
        reorder nameChildren = ["Track", "Track2", "Track3"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 5
                uniform token info:id = "68BCA0F7-0F1E-4D27-BA62-03502FCBA2E4"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Light_2_Spin>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 5
                uniform token info:id = "2C7F74FE-1AC7-4385-937F-624359F4BB6D"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Light_1_Spin>
            }
        }

        def RealityKitTrack "Track3"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 5
                uniform token info:id = "BCE3365F-BD0E-49D7-8D0A-7E3522C1592E"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Light_3_Spin>
            }
        }
    }

    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        rel behaviors = </Root/OnAddedToScene>
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Preliminary_Behavior "OnAddedToScene"
    {
        rel actions = </Root/OnAddedToScene/Action>
        uniform bool exclusive
        rel triggers = </Root/OnAddedToScene/Trigger>

        def Preliminary_Trigger "Trigger"
        {
            rel affectedObjects = </Root>
            token info:id = "SceneTransition"
        }

        def Preliminary_Action "Action"
        {
            rel affectedObjects = </Root>
            rel animationLibraryKey = </Root/Loop>
            rel animationLibraryKeyOverrideKey = </Root/OnAddedToScene/Trigger>
            token info:id = "PlayTimeline"
            int loops = 0
            int performCount = 1
            token type = "serial"
        }
    }

    def Xform "Hearts1" (
        active = true
    )
    {
        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                int64 burstCount = 250
                float3 emissionDirection = (0, 0, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Sphere"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 0.06
                float particleSpeedVariation = 0.04
                float3 shapeSize = (0.05, 0.05, 0.05)
                bool spawnInheritParentColor = 1
                token spawnOccasion = "OnUpdate"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 1
                double warmupDuration = 1.5

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, 0, 0)
                    token billboardMode = "Billboard"
                    float birthRate = 40
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    float dampingFactor = 0.25
                    float4 endColorA = (0, 0.039524972, 0.39365923, 1)
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 1
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0.5
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0.5
                    double particleLifeSpan = 1
                    double particleLifeSpanVariation = 0.2
                    float particleMass = 1
                    float particleMassVariation = 0.2
                    float particleSize = 0.05
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (1, 1, 0)
                    float radialGravityStrength = 0
                    float sizeMultiplierAtEndOfLifespan = 0.35
                    float sizeMultiplierAtEndOfLifespanPower = 3
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0
                    float4 startColorA = (0.6710024, 0.00089546974, 0.16192299, 1)
                    float stretchFactor = 0
                    bool useEndColor = 1
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -0.04, 0)
                    token animationRepeatMode = "AutoReverse"
                    token billboardMode = "Billboard"
                    float birthRate = 25
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 0
                    int64 columnCount = 4
                    float dampingFactor = 3
                    float4 endColorA = (0, 0.98059916, 1, 1)
                    float4 endColorB = (1, 0.051991113, 1, 1)
                    float frameRate = 24
                    float frameRateVariation = 0
                    int64 initialFrame = 2
                    int64 initialFrameVariation = 4
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0.25
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0.745
                    float particleAngleVariation = 0.25
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/twinkle.exr@
                    double particleLifeSpan = 0.75
                    double particleLifeSpanVariation = 0.25
                    float particleMass = 1
                    float particleMassVariation = 2
                    float particleSize = 0.02
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (0, 0, 0)
                    float radialGravityStrength = 0
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 0
                    float sizeMultiplierAtEndOfLifespanPower = 1
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 0.051991113, 1, 0.04)
                    float4 startColorB = (0, 0.98059916, 1, 0.04)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 1
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }
    }

    def Xform "Hearts2" (
        active = true
    )
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthLocation = "Volume"
                int64 burstCount = 250
                token emitterShape = "Sphere"
                bool isSpawningEnabled = 0
                float3 shapeSize = (5, 5, 5)

                def RealityKitStruct "mainEmitter"
                {
                    float birthRate = 500
                    float4 endColorA = (0.6710024, 0.00089546974, 0.16192299, 1)
                    float particleSize = 0.1
                    float4 startColorA = (0, 0.039524972, 0.39365923, 1)
                    bool useEndColor = 1
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float birthRate = 500
                    float4 endColorA = (0.6710024, 0.00089546974, 0.16192299, 1)
                    float4 startColorA = (0, 0.039524972, 0.39365923, 1)
                    bool useEndColor = 1
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                }
            }
        }
    }

    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere/DefaultMaterial>
        double radius = 0.1
        float3 xformOp:translate = (0.0016063042, 0.028029792, -3.9852822)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Sphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.078431375, 0.21568629, 0.63529414) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }
}

